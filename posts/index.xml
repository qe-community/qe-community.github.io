<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on QE Community</title><link>https://qe-community.github.io/posts/</link><description>Recent content in Posts on QE Community</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 20 Apr 2021 11:02:59 +0800</lastBuildDate><atom:link href="https://qe-community.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>寻找软件研发效能的合适指标</title><link>https://qe-community.github.io/posts/findefficiencyindicators/</link><pubDate>Tue, 20 Apr 2021 11:02:59 +0800</pubDate><guid>https://qe-community.github.io/posts/findefficiencyindicators/</guid><description>本文由张思楚发表 最近几年 “软件研发效能” 成了业界的热词 “Buzzword” ，频繁出现在各个行业大会，被各大厂、传统行业数字化部门、追求高效能的团队不断的提及并迭代，比如阿里的效能改进211愿景，腾讯的智研平台，百度工程能力白皮书。那么为什么软件研发效能会成为热词，有哪些合适的软件研发效能指标呢? 本文想尝试回答这两个问题。(下篇将尝试构建一个根据团队上下文的软件研发效能推荐指标图表，和一些实际度量指标的案例。)
为什么软件研发效能会成为热词？
咱们先看看现有的问题， 与传统制造业相比，软件研发行业还很年轻，并没有达到传统行业的大规模流水线的生产方式，这解释了为什么没有一种统一的，被广泛认可的方法来衡量开发人员或研发小组的效能。研发效能的度量很大程度上取决于公司的类型，规模，文化，与之合作的项目类型以及其它诸多因素。 甚至某些小而精，依靠聪明才智和资深经验的创业团队，不用度量研发效能，团队依然非常高效。
很显然，10年前使用代码行数(Lines of code)来度量研发效能的方式已经不适用现代敏捷过程对软件研发的理解了。以前关注代码产出，而不是业务成果，以前关注个人绩效，而不是团队效能。例如: 随着公司和开发人员向着价值驱动和基于团队开发方向的拉通，代码行数不再具有任何意义。100行代码是否比20行好？行数是否告诉你取得了良好的进展，还是只是一个没有上下文的抽象指标？软件企业都在寻求其它有效的指标来度量研发效能。
同时，如今的软件行业已经不再是“以大吃小”的时代了，而是转变成了“以快吃慢”的时代。对于很多大型软件企业、传统行业的数字化部门。原本“大”是优势，现在却陷入了“大船难掉头”的尴尬。如何破局？研发效能具体来讲就是从需求转化成软件或者服务的能力。改善研发效能从某种方面也在试图解决“大船难掉头”的尴尬。
研发效能试图在解决度量和让研发变快的问题，那为什么会成为热词? 为什么最近几年各大厂、传统行业数字化部门、追求高效能的团队，都纷纷开始在研发效能领域发力，我认为这背后的原因有以下三点：
从土壤和环境的角度来看，类似高速移动网络的普及为智能手机和App培育了土壤和环境。4G移动网络的普及，让人们可以方便、快速的接入互联网，为智能手机和App铺好了路。现代软件研发的各个环节已经全面数字化，为研发效能的数据收集和度量做好了准备。比如: 电子看板管理任务状态，可数字化团队协作情况。Git等工具管理代码提交，可数字化开发过程。持续部署流水线管理发布过程，可数字化发布情况。DevOps云上部署、编排、监控，可数字化产品运维状态。
从组织协作角度来看，很多公司都有“谷仓” (The Silo Effect) 局部优化但是无法全局优化的困境。从需求确定到开发完成优化了，但是当用户需求被设计好以后需要很长时间才能传递给开发。当产品上线后，线上问题需要很久才能从运维传递给开发人员并修复，从而影响全局效率。基于协作流程的优化，打破流程中的“谷仓”，去除不必要的等待，让价值流动快起来，也是研发效能试图解决的问题。
从资源的角度来看，以前业务的快速发展用烧钱的方式，人海战术换取更快的市场占有率达到赢家通吃是最佳选择，那时候关心的是软件产品输出，研发效率可以用人、用钱填上。 但是随着时间的推移，还有这么多从业人员可填吗？即便有了这么多人还能砸这么多钱吗？每年软件研发人员的毕业生有限，然而行业对人才的需求从没削减过，当抽干一线城市的人才，各个大厂已经开始下沉到二、三线城市的大学招人了。同时，随着产品利润的下降，需要更多的获客，回馈客户，需要开始节流了，节流就是研发效能的提升，同样的资源，同样的时间来获得更多的成果。
有哪些合适的软件研发效能指标呢? 上面基本回答了研发效能为什么会成为热词，有哪些合适的软件研发效能指标呢? 要度量哪些数据呢？根据不同的场景和目标人群需要给出相应的度量指标。正如《关键对话》中建议的，需要根据信息接收者的兴趣点来构建沟通策略和沟通内容。从研发效能DevOps角度 《Accelerate》 这本书给出了4个指标和评价标准。研发效能是一个比较大的话题，如何根据不同的关注点，给出不同的指标呢？ Roy Osherove 的 “Lies, Damned Lies, and Metrics”也给出了很好的归类。根据我们在项目中的实际使用和经验总结，这里把当前常用的度量指标归类如下：
规划与进度：评估进度，获取背景信息和上下文，知道任务何时完成，预测问题（未来），对问题复盘与回顾（过去）。
燃尽图 (每个迭代/每个发布) （Burndown chart sprint/release)
速率图 (Velocity chart)
标准方差 (Standard deviation)
吞吐量（Throughput)
累积流程图 (Cumulative flow diagram)</description></item><item><title>QA行业认证杂谈</title><link>https://qe-community.github.io/posts/qa_certificates/</link><pubDate>Mon, 19 Apr 2021 13:56:59 +0800</pubDate><guid>https://qe-community.github.io/posts/qa_certificates/</guid><description>本文由寇永发表 今天周末的杭州还是阴雨连绵，像极了多年前在安徽经历过的梅雨季节：三月就下了一场雨，一场雨下了三个月。既然已经数次领略临安烟雨，也哼罢了“西湖美景举世无双”的太平歌词，今天索性坐在案前搬文弄墨来。虽无红袖添香，但有茗茶相伴，同样快意。
入QA行业多年，回想起来一直摸石头过河，深一脚浅一脚，沉浮由它，竟忽视了时不时看看周围，没准儿能碰上一股浪劲儿，随着树叶一起早些过河呢。最近正巧在对QA行业的能力认证做一番搜罗学习，正好拿出来聊聊，大家探讨。
现在QA行内领先的职业认证，有这四大主角：
ISTQB - International Software Testing Qualification Board QAI cert - Quality Assurance Institute certificates 软件评测师 - 隶属于软考 CBSTC - 软件测试能力认证联盟 至于为什么要选四个，或者说是凑四个（结尾你会有感觉）。倒是没什么逻辑，纯粹个人爱好，毕竟四开头的东西都蛮出名，比如四大发明，四大名著，四大天王，还有真的“四大”。
五维对比 大家还记得那档（或许是曾经）火爆异常的综艺《非X勿扰》，会把嘉宾从不同维度来展示，如情感经历，生活爱好，家庭情况等，以便观众们能更全面了解，选取天选之爱。
既然我们是横览业内知名的四大认证，也免不了摊平了比一比，而不能一股脑堆上来让观众摘择。略加思索，就有了下面非X勿扰-比武招亲的打趣儿文字，待看四大认证谁称英雄。
知名度 在这个维度，依认证机构官方的推介力度，ISTQB和软考(软件评测师)知名度无疑更强，现存持证人数也不分上下。其认可范围，一中一外，一楚一汉，隔河相对，倒也相安。QAI历史悠久，但影响力只在美印两地。至于帅气小生CBSTC，初来乍到，随出身名门，但认证行业实力说话靠不了爹娘，起点尤高也需期后续。
认证结构 认证结构组成来谈，ISTQB倒是包罗万象，涵盖自动化技术，专项测试，测试管理，流程演进种种，可谓达到了大一统。QAI看则更专注于质量和业务本身的两三点，或许是对ISTQB明知不敌，而聚力亮剑，勇者可敬。然而软考只软件评测师一例应敌，略显单薄，或许背靠官家，参与一二，胜负遂缘，佛系大气。
培训资源 从培训的师资力量和多元方式看，ISTQB除了那有时难倒英雄汉的价格之外，和软件评测师之间又一次不分伯仲。QAI基本可算经过之前几年一番硬拼但力弱不敌，已被国内培训界置为弃子。至于CBSTC在此处，和上个维度一样，我只觉得巧妇难为，想捧但无从谈起。
考试3W (Where, When, What) 考试相关就提两点，其一为花费，这ISTQB不允许跳级报考，远看像是个聚宝盆，近观感觉在打劫。其二为考试题型，评测师和QAI的简答主观题倒是正对了试图以认证检验能力的人心。而CBSTC (此处省略10个字)。
含金量 对于含金量，的确很难分个高低上下。为什么呢？ 这就跟对比哪个品牌的鼻毛剪更好用一个道理，你趁着鼻毛不留神猛然拔掉，不快，不香吗？
当然话还需分两说，在特定的场合这些认证还是很有用处的，比如评职称，投标资格等，只要做到对症就行。有时还会有意外收获，就像报考心理咨询师认证之前，谁也不会预料到持证以后与男性朋友之间会产生心理隔阂，却不期而遇成了千百女神之友。 如何选择 还是那档（祝愿它一直）火爆的综艺，该看的能看的都看过了，虽然各有特点难分上下但心中也有了初略的想法。那谁才是那个注定的它呢？这还得与自身条件做个参照，对比前世今生，看看哪一款更合适。
就像这样： 如果你对QA行业前景已经看空，敬请绕行，可以另觅良缘。 或者 如果你是毕业生或者入行QA行业两三年，ISTQB是合适的选择 如果你计划走偏技术QA的路线，ISTQB是合适的选择 如果你计划走偏业务或管理方面的路线，QAI是合适的选择 如果你希望检验自己的自学能力，QAI是合适的选择 如果你想系统性的温习计算机行业的理论，软件评测师是合适的选择 如果你怀念大学时候的学习热情想重拾那颗坚定的心，软件评测师是合适的选择 如果你已过而立，软件评测师是合适的选择，国家中级职称可以在年老时可以多领一些退休金 如果你追求代码整洁和技术卓越，请原谅我此处逻辑的冗余 但是 人生从来不是“如果&amp;hellip;就&amp;hellip;”这样的逻辑推理剧，而更多是“当&amp;hellip;会&amp;hellip;”的感性情景剧。 这个时候，还有终极一招，那就是从小到大屡试不爽的“遇事不决，抓阄解决”了。
隐约中，我仿佛看见满天都是写着A, B, C, D的小纸团在飞舞。不过，我希望可以暖心提醒你“拿掉那个写着D的纸团吧”，不然你会有一种买了套还没挖地基的商品期房的感觉 -&amp;gt; 交房的日子遥遥无期。
茶，业已三泡，清香渐隐。时至正午，该填填肚子了，到此作罢。 人是铁饭是钢嘛，周末快乐</description></item><item><title>另一个作者</title><link>https://qe-community.github.io/posts/second-author/</link><pubDate>Sat, 17 Apr 2021 00:43:59 +0800</pubDate><guid>https://qe-community.github.io/posts/second-author/</guid><description>本文由author2发表 Hi，我是Author2。</description></item><item><title>测试代码高亮</title><link>https://qe-community.github.io/posts/code-highlight/</link><pubDate>Fri, 16 Apr 2021 00:43:59 +0800</pubDate><guid>https://qe-community.github.io/posts/code-highlight/</guid><description>测试代码高亮 Java public class SomeClass() { public void someMethod() { String message = &amp;#34;Hello&amp;#34;; System.out.println(message); } } JavaScript const message = &amp;#34;Hello&amp;#34;; console.log(message) Shell message=&amp;#34;Hello&amp;#34;; echo ${message}</description></item></channel></rss>